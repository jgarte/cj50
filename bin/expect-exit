#!/usr/bin/env perl

use strict;
use utf8;
use warnings;
use warnings FATAL => 'uninitialized';

sub DIE {
    open my $out, ">", "/dev/tty" or die "/dev/tty: $!";
    print $out @_, "\n" or die $!;
    exit 1;
}

@ARGV == 4 or DIE "need 4 arguments, got ".@ARGV;
my ($expected_exit_code_file, $args_file, $env_file, $binary_file) = @ARGV;

open my $in, "<", $expected_exit_code_file
    or DIE "$expected_exit_code_file: $!";

my $code = <$in>;
chomp $code;

close $in or DIE $!;


open my $args, "<", $args_file
    or DIE "$args_file: $!";
my @args = <$args>; chomp @args;
close $args or DIE $!;

{
    open my $env, "<", $env_file
        or DIE "$env_file: $!";
    my @env = <$env>; chomp @env;
    close $env or DIE $!;

    for (@env) {
        if (my ($name, $val) = /^(\w+)=(.*)/) {
            $ENV{$name}= $val;
        } else {
            DIE "invalid env var syntax in: $env_file";
        }
    }
}

system $binary_file ($binary_file, @args);

my $got = $?;

if ($got == $code) {
    exit 0;
} else {
    DIE "expected exit code $code, got $got"
}
