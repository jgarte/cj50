#!/usr/bin/env perl

my $copyright= <<'COPYRIGHT';
# Copyright 2023 by Christian Jaeger <ch@christianjaeger.ch>
# Published under the same terms as perl itself
COPYRIGHT

use strict;
use utf8;
use warnings;
use warnings FATAL => 'uninitialized';
use experimental 'signatures';

my ($email_full)= $copyright=~ / by ([^\n]*)/s;

my ($mydir, $myname);
BEGIN {
    $0=~ /(.*?)([^\/]+)\z/s or die "?";
    ($mydir, $myname)=($1,$2);
}

#use Chj::ruse;
use FP::Show; use FP::Repl; use FP::Repl::Trap;#
use Getopt::Long;
use Chj::IO::Command;
use Chj::xperlfunc ":all";
use Chj::xIOUtil "xputfile_utf8";
use Chj::chompspace;
use Chj::TEST;


sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname

  Extract API documentation, for all the items following a block of
  lines starting with '///', as well as a single optional '//!' block
  per file (usually near the top).


  --test  run the tests

  ($email_full)
";
exit (@_ ? 1 : 0);
}

our $verbose=0;
my $opt_test;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "test"=> \$opt_test,
	   ) or exit 1;
usage if @ARGV;


sub source_prototypes($source, $symbol) {
    $source=~ /
        (?: ^ | ; | \} ) # last item
        \s*
        # \n  can't require that, it's not in generated code in -E output
        (\w+ [^;{}]* [^\(] \b \Q$symbol\E \s*\( [^;{}]* ) \{
    /sgx
}

sub prototype_from_E_cleanup($s) {
    $s=~ s/\bstatic\b(?:\s*UNUSED\b)?//s;
    $s=~ s/\b__attribute__\s*\(\(.*?\)\)//s;
    $s=~ s/ +/ /g;
    $s=~ s/\b_Bool\b/bool/sg;
    chompspace $s
}

sub prototype_cleanup_for_display($s) {
    $s=~ s/\bstatic\b(?:\s*UNUSED\b)?//s;
    chompspace expand_xcat_in_prototype($s)
}

# Pandoc can't work with 'new_Vec_$T' because it understands the '$'
# as TeX indicator (why in this context, huh?). Also, apparently
# digits are not valid in anchor identifiers, so avoid those, too
# (huh!).

my %digit2id= (
    0=> "zero",
    1=> "one",
    2=> "two",
    3=> "three",
    4=> "four",
    5=> "five",
    6=> "six",
    7=> "seven",
    8=> "eight",
    9=> "nine",
    );

sub sym_to_id($subsection, $sym) {
    $subsection=~ s/ .*//;
    $subsection=~ s{([0-9])}{$digit2id{$1}}sg;
    # leave in the '.', OK?
    my $id = "${subsection}_${sym}";
    $id=~ s/Q/QQ/sg;
    $id=~ s/\$/QD/sg;
    $id=~ s{([0-9]+)}{
          "Q".join("", map { $digit2id{$_} } split //, $1)."E"
    }sge;
    $id=~ s{([^A-Za-z0-9_.])}{
        "Qord".join("", map { $digit2id{$_} } split //, ord($1))."E"
    }sge;
    $id
}

TEST { sym_to_id '1.5 foo', 'new_Vec_$T' } 'one.five_new_Vec_QDT';
TEST { sym_to_id '1 foo', 'new_vec' } 'one_new_vec';
TEST { sym_to_id '', 'XCAT' } '_XCAT';
TEST { sym_to_id '', 'new_Vec_<T>' } '_new_Vec_QordsixzeroETQordsixtwoE';


sub tex_escape($str) {
    # $str=~ s/([&%\$\#_\{\}])/\\$1/sg;
    # no, _ has its own meaning in Markdown, though.
    # For now, just:
    $str=~ s/([\$])/\\$1/sg;
    $str
}

TEST { tex_escape 'id_$VEC_$T' } 'id_\\$VEC_\\$T';

# use FP::Repl; repl;
# __END__
# ------------------------------------------------------------------
package TypedNameExpression {
    use FP::Struct ["name"]=> qw(FP::Struct::Show);

    sub symbolname($self) {
        my $name = $self->name;
        if ($name =~ /^[A-Z]+$/) {
            # free type variable
            '$'.$name
        } else {
            $name
        }
    }
    
    _END_
}

package BareExpression {
    use FP::Struct []=> qw(TypedNameExpression);

    sub is_xcat($self) {
        # can't be a *proper* XCAT call, anyway.
        0
    }

    _END_ "main"
}

package ParameterizedExpression {
    use FP::Struct ["arguments"]=> qw(TypedNameExpression);

    sub is_xcat($self) {
        $self->name=~ /^X?CAT$/
    }

    # Imitate what the C macros are doing
    sub symbolname($self) {
        if ($self->is_xcat) {
            join("",
                 map {
                     $_->symbolname
                 } @{$self->arguments})
        } else {
            (
             $self->SUPER::symbolname .
             "_" .
             join("__",
                  map {
                      $_->symbolname
                  } @{$self->arguments})
             )
        }
    }
    
    _END_ "main"
}

# ------------------------------------------------------------------
package ParseReturn {
    use FP::Predicates ":all";
    use FP::Struct [
        [\&is_natural0, "list_level"], # 0 = toplevel
        [\&is_string, "immediate_remainder"],
        ]=> qw(FP::Struct::Show);

    sub is_ok($self) {
        ! $self->is_err
    }
    sub is_err { 0 }
    sub is_arguments_list { 0 }
    sub items($self) {
        # only guaranteed to work if is_arguments_list is true
        $self->list->array
    }
    _END_
}


# when encountering ')'
package ParseNull {
    use FP::Predicates ":all";
    use FP::List qw(cons null);
    use FP::Struct [
        ]=> qw(ParseReturn);

    sub is_arguments_list($self, $last_was_comma, $is_first) {
        !$last_was_comma
    }
    sub far_remainder($self) {
        $self->immediate_remainder
    }
    sub list($self) {
        null
    }
    _END_ "main"
}

# A single value
package ParseValue {
    use FP::Predicates ":all";
    use FP::List qw(cons null);
    use FP::Struct [
        [instance_of("TypedNameExpression"), "value"],
        [instance_of("ParseReturn"), "rest"],
        ]=> qw(ParseReturn);

    sub is_arguments_list($self, $last_was_comma, $is_first) {
        ($is_first or $last_was_comma)
            and $self->rest->is_arguments_list(0, 0)
    }
    sub far_remainder($self) {
        $self->rest->far_remainder
    }
    sub list($self) {
        cons($self->value, $self->rest->list)
    }
    _END_ "main"
}

# A comma token.
package ParseComma {
    use FP::Predicates ":all";
    use FP::List qw(cons null);
    use FP::Struct [
        [instance_of("ParseReturn"), "rest"],
        ]=> qw(ParseReturn);

    sub is_arguments_list($self, $last_was_comma, $is_first) {
        !$is_first and !$last_was_comma
            and $self->rest->is_arguments_list(1, 0)
    }
    sub far_remainder($self) {
        $self->rest->far_remainder
    }
    sub list($self) {
        $self->rest->list
    }
    _END_ "main"
}

package ParseError {
    use FP::Predicates ":all";
    use FP::Struct [
        [\&is_string, "message"],
        ]=> qw(ParseReturn);

    sub is_err { 1 }
    _END_ "main"
}

# Returns a `ParseReturn`
sub parse_typednameexpression($s, $call_level, $list_level) {
    my $origs= $s;
    #warn "perhaps_parse_typednameexpression('$s', $call_level, $list_level)";
    $s=~ s/^\s+//;
    if (0 == length $s) {
        ParseNull(0, $s)
    } elsif ($s=~ s/^(\w+)\s*//s) {
        my $name = $1;

        my $rest = parse_typednameexpression($s, $call_level+1, $list_level);
        my $leveldiff = $rest->list_level - $list_level;
        if ($rest->is_arguments_list(0, 1) and $leveldiff) {
            if ($leveldiff > 1) {
                die "more than one list nesting ($leveldiff), should never happen"
            }
            #warn "it's a call";
            my $remainder = $rest->far_remainder;
            ParseValue($list_level,
                       $remainder,
                       ParameterizedExpression($name, $rest->items),
                       parse_typednameexpression($remainder,
                                                 $call_level+1,
                                                 $list_level))
        } else {
            ParseValue($list_level,
                       $s,
                       BareExpression($name),
                       $rest)
        }
    } elsif ($s=~ s/^\(//) {
        #warn "it's a list";
        parse_typednameexpression($s, $call_level+1, $list_level+1);
    } elsif ($s=~ s/^\s*,\s*//s) {
        #warn "comma, have more";
        # uh
        my $rest = parse_typednameexpression($s, $call_level+1, $list_level);
        ParseComma($list_level,
                   $s,
                   $rest)
    } elsif ($s=~ s/^\s*\)//) {
        #warn "end paren, it's the end of comma list";
        ParseNull($list_level,
                  $s)
    } else {
        ParseError($list_level, $s, "no match")
    }
}

sub perhaps_xcat_symbol($s) {
    # e.g. 'XCAT(new_, Vec(T))...' -> 'new_Vec_$T'
    my $e = parse_typednameexpression($s, 0, 0);
    if ($e->isa("ParseValue")) {
        # take first item, ignore the rest.
        my $v = $e->value;
        if ($v->is_xcat) {
            $v->symbolname
        } else {
            ()
        }
    } else {
        ()
    }
}

TEST { [ perhaps_xcat_symbol 'XCAT(new_, Vec(T))...' ] } [ 'new_Vec_$T' ];
TEST { [ perhaps_xcat_symbol 'XCAT(new_, Vec(T, C))...' ] } [ 'new_Vec_$T__$C' ];
TEST { [ perhaps_xcat_symbol 'XCAT(new_, VEC(T, C))...' ] } [ 'new_$VEC_$T__$C' ];
TEST { [ perhaps_xcat_symbol 'XCAT(new_, T)...' ] } [ 'new_$T' ];
TEST { [ perhaps_xcat_symbol 'XCAT(new_, XCAT(foo_, T))...' ] } [ 'new_foo_$T' ];
TEST { [ perhaps_xcat_symbol '(new_, XCAT(foo_, T))...' ] } [  ];
TEST { [ perhaps_xcat_symbol 'A(new_, XCAT(foo_, T))...' ] } [  ];
TEST { [ perhaps_xcat_symbol 'XCAT(new_, XCAT(foo_, T))...' ] } [ 'new_foo_$T' ];


sub expand_xcat_in_prototype($s) {
    if ($s=~ m/\b(X?CAT\()/sg) {
        my $posend = pos($s);
        my $pos = $posend - length($1);
        my $p0 = substr($s, 0, $pos);
        my $p1 = substr($s, $pos);
        
        my $e = parse_typednameexpression($p1, 0, 0);
        if ($e->isa("ParseValue")) {
            # take first item, ignore the rest.
            my $v = $e->value;
            if ($v->is_xcat) {
                $p0 . $v->symbolname . expand_xcat_in_prototype($e->immediate_remainder)
            } else {
                $s
            }
        } else {
            $s
        }
    } else {
        $s
    }
}

TEST { expand_xcat_in_prototype 'size_t XCAT(is_empty_, Vec(T))(const Vec(T) *self)' } 'size_t is_empty_Vec_$T(const Vec(T) *self)';
TEST { expand_xcat_in_prototype 'size_t is_empty_Vec(T)(const Vec(T) *self)' } 'size_t is_empty_Vec(T)(const Vec(T) *self)';
TEST { expand_xcat_in_prototype 'size_t XCAT(is_empty_, Vec(T))XCAT(const Vec(T)) *self)' } 'size_t is_empty_Vec_$TXCAT(const Vec(T)) *self)';
TEST { expand_xcat_in_prototype 'size_t XCAT(is_empty_, Vec(T))XCAT(const, Vec(T)) *self)' } 'size_t is_empty_Vec_$TconstVec_$T *self)';
TEST { expand_xcat_in_prototype 'size_t XCAT(is_empty_, Vec(T)) XCAT(const, Vec(T)) *self)' } 'size_t is_empty_Vec_$T constVec_$T *self)';
TEST { expand_xcat_in_prototype 'size_t XCAT(is_empty_, VEC(T))(VEC(T) *self)' } 'size_t is_empty_$VEC_$T(VEC(T) *self)';

# use FP::Repl; repl;
# __END__
# ------------------------------------------------------------------

my $std_prototypes = +{
    putchar=> "int putchar(int c)",
    free=> "void free(void *ptr)",
};


package GenericsMember {
    use FP::Struct ["key"]=> qw(FP::Struct::Show);
    _END_
}
package GenericsOther {
    use FP::Struct ["expr"]=> qw(GenericsMember);
    sub code($self, $symbol_lookup) { $self->expr }
    _END_
}
package GenericsFunction {
    use FP::Struct ["symbol"]=> qw(GenericsMember);
    sub code($self, $symbol_lookup) {
        my $symbol = $self->symbol;
        $symbol_lookup->($symbol)
    }
    _END_
}


package DocEntry {
    use Chj::chompspace;
    use FP::PureArray;
    
    use FP::Struct [
        "headerpath",
        "bare_docs",
        "bare_prototype",
        "terminator",
        ]=> qw(FP::Struct::Show);

    sub docs($self) {
        my $s = $self->bare_docs;
        $s=~ s{(^|\n)/// ?}{$1}sg;
        $s =~ s{\s+\z}{}s;
        $s
    }

    sub prototype($self) {
        my $s = $self->bare_prototype;
        $s = main::prototype_cleanup_for_display($s);
        # Remove #define, or leave it in? At least canonicalize it
        #$s =~ s{^#\s*define\s+}{#define }s;
        $s =~ s{^#\s*define\s+}{}s;
        $s
    }

    sub symbol($self) {
        my $s = $self->bare_prototype;
        $self->{symbol} //= do {
            if ($s=~ m{^\s*#\s*define\s+(\w+)}) {
                $1
            } elsif ($s=~ m{^typedef\s+struct\s+(\w+)}) {
                $1
            } elsif ($s=~ m{^typedef\b.*\b(\w+)\s*$}) {
                $1
            } else {
                # Now it gets hard! ucfirst really disambiguates here? !
                if ($s=~ m{ ([a-z]\w*)\s*\(}) {
                    $1
                } elsif ($s=~ m{ (X?CAT\(.*)}s) {
                    main::perhaps_xcat_symbol($1)
                        or die("looks like XCAT but ".
                               "doesn't parse as such: '$1'")
                } elsif ($s=~ m{^ \s* const \s+ \S+ \s+ ([a-zA-Z_]\w*) \s*
                                  =[^=] }sx) {
                    # global constants
                    $1
                } else {
                    die "no match"
                }
            }
        }
    }

    sub kind($self) {
        my $p = $self->bare_prototype;
        if ($p =~ /^\s*#\s*define\s*(\S+)/) {
            my $definitionfirst = $1;
            if ($self->terminator =~ /_Generic/) {
                "2 Generic functions"
            } else {
                #if ($definitionfirst =~ m{\(}) {
                    "3 Macros"
                #} else {
                #    "Constants"
                #}
            }
        } elsif ($p=~ m{^typedef\b(\s+struct\b)?}) {
            $1 ? "0 Types" : "0.1 Type aliases"
        } elsif ($p=~ m{^ \s* const \s+ \S+ \s+ ([a-zA-Z_]\w*) \s*
                          =[^=] }sx) {
            "0.5 Constants"
        } else {
            "1 Normal functions"
        }
    }

    sub generic_members($self) {
        my $term = $self->terminator;
        if ($term=~ s/.*?_Generic//s) {
            my @m = $term =~ m{,\s*([^:]+:.*?)\\\n}g;
            my @e = map {
                my $s = $_;
                if ($s=~ s/^(.*?)://s) {
                    my $key = chompspace($1);
                    $s=~ s/^\s+//s;
                    $s=~ s/\s+\z//s;
                    $s=~ /_Generic/ ? () : do {
                        my $class = $s=~ m{^[a-zA-Z_]\w*\z}s ?
                            "GenericsFunction" : "GenericsOther";
                        $class->new($key, $s)
                    }
                } else {
                    ()
                }
            } @m;
        } else {
            ()
        }
    }
    
    sub markdown($self, $symbol_lookup) {
        my @code = map {
            "$_\n"
        } split /\n/, $self->prototype;
        my @docs = map {
            "$_\n"
        } split /\n/, $self->docs;
        my @generic_members = $self->generic_members;
        my $generic_members = @generic_members ? do {
            my $m = purearray(@generic_members);
            my $maxlen = $m->map(sub($o){length $o->key})->max;
            my $lines = $m->map(
                sub($o) {
                    my $k = $o->key;
                    my $sp = $maxlen - length $k;
                    $k.(" "x$sp)." : "
                        .chompspace($o->code($symbol_lookup)).";\n"
                });
            #use FP::Repl; repl;
            join("",
                 (
                  "\n",
                  "Members:\n",
                  "\n",
                  "```C\n",
                  $lines->sort->values,
                  "```\n",
                 )
                )
        } : "";
        my $sym = main::tex_escape($self->symbol);
        my $id = main::sym_to_id($self->kind, $sym);
        join("",
             (
              "## $sym {#$id}\n",
              "\n",
              "```C\n",
              @code,
              "```\n",
              "",
              @docs,
              $generic_members
             ))
    }
    _END_
}


my $DOCWARNING = "<!-- THIS FILE WAS AUTO-GENERATED by $myname. DO NOT EDIT! -->\n\n";

sub do_append_whitespace_footer($docref) {
    # Append superfluous space at the end so that it can jump to the
    # right place?
    $$docref .= "<hr>\n";
    for (1..30) {
        $$docref .= "<p>&nbsp;</p>\n";
    }
}

sub output_path($inpath) {
    "doc-output/$inpath.md"
}

my $tripleslashline = qr{(?: /// [^\n]* \n )}xs;
my $topslashline = qr{(?: //\! [^\n]* \n )}xs;
my $emptyline = qr{(?: [ \t]* \n )}xs;
my $docblock = qr{ (?: $emptyline $tripleslashline+  )+ }xs;
my $topblock = qr{ (?: (?: ^ | $emptyline) $topslashline+ )+ }xs;

sub filedocs ($path) {
    my $s = xgetfile_utf8 $path;
    my %items;
    while ($s=~ m{
               ($docblock)
               $emptyline?

               # captured code:
               (
                  # struct definition
                  typedef\s+struct\s+ \w+ \s+\{.*?\}\s* \w+(?=;)
                    # ^ the first and second \w+ block should be identical, todo?
                  |
                  .*? # simply whatever up to the terminator
               )
               # terminator:
               (
                   \{                       # function
                  | ;                        # e.g. typedef
                  | \\ (?: \s* _Generic .*?[^\\]\n)?    # generic
                  | (?= \n (?: /// | \# | [ \t]*\n ))
               )
           }xsg) {
        my $e = DocEntry->new( $path, $1, $2, $3 );
        push @{$items{$e->kind}}, $e;
    }
    my ($maybe_topblock) = $s=~ m{ ($topblock) }xs;

    my $genfile = sub($symbol_lookup) {
        my $doc = $DOCWARNING;
        # $doc .= "# Documentation for $path\n\n";

        if (defined $maybe_topblock) {
            my @lines = map {
                s{^//\! ?}{};
                s{\s+\z}{};
                "$_\n"
            } split /\n/, $maybe_topblock;
            $doc .= join("", @lines)."\n";
        }

        for my $key (sort keys %items) {
            my $items = $items{$key};
            my $subsection = $key;
            $subsection =~ s/^\d+(?:\.\d+)? +//;
            $doc .= "# $subsection\n\n";
            for my $item (@$items) {
                $doc .= $item->markdown($symbol_lookup)."\n";
            }
        }

        do_append_whitespace_footer(\$doc);

        my $outpath = output_path($path);
        xmkdir_p dirname($outpath);
        xputfile_utf8 $outpath, $doc;
    };
    (\%items, $genfile, $s)
}


sub main() {
    my @headerfiles = do {
        my $s = Chj::IO::Command->new_sender(qw(gls-of-suffix h));
        my @l = $s->xreadline;
        $s->xxfinish;
        chomp @l;
        @l
    };

    my @itemss = map { [ filedocs($_) ] } @headerfiles;


    my %documented_headerfiles;
    my @genfiles; # generators for a .h.md file each
    my @s; # contents of a .h file each
    my $doc_Names = do {
        my $doc = ""; # part only
        my %items; # across all pages, by kind
        my %flatitems; # across all pages, directly
        for my $items_genfile (@itemss) {
            my ($items, $genfile, $s) = @$items_genfile;
            push @genfiles, $genfile;
            push @s, $s;
            # partial copy paste of this loop:
            for my $key (sort keys %$items) {
                my $items = $items->{$key};
                for my $item (@$items) {
                    my $symbol = $item->symbol;
                    die "duplicate symbol" if exists $items{$key}{$symbol};
                    $items{$key}{$symbol} = $item;
                    $flatitems{$symbol} = $item;
                }
            }
        }
        # Now %flatitems is filled and we can call the genfiles.  For
        # general symbol->prototype resolution, we need the -E output,
        # though (@s is not necessarily enough: `GENERATE_*`ed code
        # would not be found via my regexes in it).
        my $_E = `clang -E -I. cj50.h`; $? == 0 or die "error";

        # Remove parts included from system headers to speed up the
        # slow regex in `source_prototypes`:
        my @E;
        my $current_file;
        for (split /\n/, $_E) {
            if (/^# \d+ "([^"]+)"/) {
                $current_file = $1;
            } elsif (/^#/) {
                # ignore
            } else {
                push @E, $_
                    unless $current_file =~ m{^/usr/};
            }
        }
        my $E = join("\n", @E);

        # use FP::Repl; repl;
        my $symbol_lookup = do {
            my %symbol_cache;
            sub ($symbol) {
                $symbol_cache{$symbol} //= do {
                    if (defined (my $obj= $flatitems{$symbol})) {
                        $obj->prototype
                    } else {
                        $std_prototypes->{$symbol} // do {
                            # need to go find it in the source code
                            my @prototypes;
                            for my $s (@s) {
                                push @prototypes, source_prototypes($s, $symbol);
                            }
                            if (@prototypes == 1) {
                                prototype_from_E_cleanup($prototypes[0])
                            } elsif (@prototypes) {
                                die "more than 1 match for symbol '$symbol'";
                            } else {
                                @prototypes = source_prototypes($E, $symbol);
                                if (@prototypes == 1) {
                                    prototype_from_E_cleanup($prototypes[0])
                                } elsif (@prototypes) {
                                    die "more than 1 match for symbol '$symbol'";
                                } else {
                                    die "could not find symbol '$symbol'";
                                }
                            }
                        }
                    }
                }
            }
        };
        for my $genfile (@genfiles) {
            $genfile->($symbol_lookup);
        }
        
        # even more copy paste:
        for my $key (sort keys %items) {
            my $items = $items{$key};
            my $subsection = $key;
            $subsection =~ s/^\d+(?:\.\d+)? +//;
            $doc .= "## $subsection\n\n";
            # ah and here we sort the symbol instead of go straight:
            for my $sym (sort { lc($a) cmp lc($b) or $a cmp $b } keys %$items) {
                # only change from copy paste is here:
                my $item = $items->{$sym};
                my $path = $item->headerpath;
                $documented_headerfiles{$path}++;
                my $id = sym_to_id($key, $sym);
                my $escaped_sym = tex_escape($sym);
                $doc .= "* [$escaped_sym]($path.md#$id)\n";
            }
            $doc .= "\n";
        }
        $doc
    };
    
    my $outpath = output_path("index");
    xmkdir_p dirname($outpath);

    my $doc = $DOCWARNING;
    # $doc .= "# Documentation index\n\n";

    # Meta
    $doc .= "\n" . xgetfile_utf8("config/index-meta.md") . "\n\n";

    $doc .= "# Files\n\n";
    for my $path (sort keys %documented_headerfiles) {
        $doc .= "* [$path]($path.md)\n\n";
    }

    $doc .= "# Names\n\n";
    $doc .= $doc_Names;
    
    do_append_whitespace_footer(\$doc);

    xputfile_utf8 $outpath, $doc;
}

if ($opt_test) {
    my $r = Chj::TEST::run_tests("main");
    exit($r->failures);
} else {
    main
}
